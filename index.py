
import bisect
from fileinput import filename
import matplotlib.pyplot as plt
import flask
import json
import sys
import os
import mysql.connector
from flask import Flask,render_template,redirect,url_for,request
from flask_wtf import FlaskForm
from numpy import true_divide
from wtforms import FileField,SubmitField
from werkzeug.utils import secure_filename
from database import mycursor,db
import random 
random.seed(7)
random.choice('ACGT')



# read the human refrence and malaria fasta file to solve some of memory problem

def readFastA(filename):
    genome=""
    with open(filename,'r') as f:
        for line in f:
            if( not line[0] =='>'): 
             genome+=line.rstrip()
    return genome

# seq=readFastA('static\data\AAA29605.1.fasta')
# print(seq)
# print(len(seq))


# frequecy of bases for malaria
# print(' frequecy of bases ')
# freqs={'A':0,'C':0,'G':0,'T':0}
# for base in seq:
#     freqs[base]+=1
# print(freqs)    
# x= freqs.keys()
# y= freqs.values()
# plt.bar(x,y)
# plt.show()

#convert dict to json string or make my artificial dataset

# p='ATGAATGTGCTATTTCTTTCGTATAATATTTGTATTCTTTTTTTTGTTGTATGCACATTAAATTTTTCTACTAAGTGCTTTTCCAATGGTTTATTGAAGAATCAAAATATCCTAAACAAAAGTTTTGATTCCATAACGGGAAGATTATTAAACGAAACCGAATTAGAAAAAAATAAAGATGATAATTCAAAATCTGAAACGTTGTTAAAAGAGGAAAAAGATGAAAAGGATGATGTACCTACAACGAGTAATGACAACCTTAAGAATGCTCATAATAATAATGAAATATCAAGTTCAACTGATCCAACGAATATTATTAATGTTAATGATAAAGATAATGAAAACTCTGTAGATAAAAAAAAAGATAAAAAAGAAAAAAAGCATAAAAAAGATAAAAAAGAAAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAACATAAAAAAGAAAAAAAACATAAAAAAGATAAAAAAAAAAAAGAAAACAGTGAAGTGATGTCTTTATATAAAACGGGTCAACATAAACCAAAAAACGCAACAGAACATGGTGAAGAAAATTTAGATGAAGAAATGGTAAGTGAAATAAATAATAATGCACAAGGTGGACTCCTTTTATCAAGCCCATATCAATATAGAGAACAAGGAGGATGTGGAATCATATCTAGTGTTCATGAGACGTCTAATGATACAAAAGATAATGATAAAGAAAATATATCCGAAGACAAAAAGGAGGACCATCAACAAGAAGAAATGTTGAAAACACTTGATAAAAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAGAACAAGAAAAAATCGAAAAAAAAAAAAAAAAGCAAGAAGAAAAGGAAAAGAAAAAACAAGAAAAAGAAAGAAAAAAACAAGAAAAGAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAAAACAAAAAAAAATAGAAAAAGAAAGAAAAAAGAAAGAAGAAAAGGAAAAGAAAAAGAAAAAACATGATAAGGAAAATGAAGAAACAATGCAACAACCAGATCAAACAAGTGAAGAAACCAACAATGAAATTATGGTACCATTACCAAGTCCATTGACAGACGTAACTACACCAGAAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGGAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGAAGAACACAAAAAAGAAGAACACAAATCAAAAGAACACAAATCAAAAGGAAAGAAAGATAAAGGAAAGAAAGATAAAGGAAAACATAAAAAAGCAAAAAAAGAAAAAGTAAAAAAACACGTAGTTAAAAATGTTATAGAAGATGAAGACAAAGATGGTGTAGAAATAATAAACTTAGAAGATAAAGAGGCATGTGAAGAACAACACATAACAGTAGAAAGTAGACCACTAAGCCAACCACAATGTAAACTAATAGATGAACCAGAACAATTAACATTAATGGATAAATCAAAAGTTGAAGAAAAAAACTTATCCATACAAGAGCAATTAATAGGTACCATAGGACGTGTTAATGTAGTACCCAGAAGAGATAATCATAAGAAAAAAATGGCGAAGATAGAGGAAGCTGAACTTCAAAAACAGAAACATGTTGATAAGGAAGAAGACAAAAAAGAAGAATCTAAAGAGGTACAAGAAGAATCTAAAGAGGTACAAGAAGATGAAGAAGAAGTAGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGATGAAGATGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGATGATGAAGAAGATGATGATGAAGAAGATGATGATGAAGATGAAGATGAAGATGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAAGAAGAATCAGAAAAAAAAATAAAAAGAAATTTGAGAAAAAATGCCAAAATCTAA'







def naiveHamming(p,t,maxDist):
    
    occurences=[]
    for i in range(len(t)-len(p)+1):
        nmm=0
        match=True
        for j in range(len(p)):
            if t[i+j] !=p[j]:
                nmm+=1
                if nmm >maxDist:
                    break
        if nmm <=maxDist:
            occurences.append(i)
    return occurences       



# p='ATGAATGTGCTATTTCTTTCGTATAATATTTGTATTCTTTTTTTTGTTGTATGCACATTAAATTTTTCTACTAAGTGCTTTTCCAATGGTTTATTGAAGAATCAAAATATCCTAAACAAAAGTTTTGATTCCATAACGGGAAGATTATTAAACGAAACCGAATTAGAAAAAAATAAAGATGATAATTCAAAATCTGAAACGTTGTTAAAAGAGGAAAAAGATGAAAAGGATGATGTACCTACAACGAGTAATGACAACCTTAAGAATGCTCATAATAATAATGAAATATCAAGTTCAACTGATCCAACGAATATTATTAATGTTAATGATAAAGATAATGAAAACTCTGTAGATAAAAAAAAAGATAAAAAAGAAAAAAAGCATAAAAAAGATAAAAAAGAAAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAACATAAAAAAGAAAAAAAACATAAAAAAGATAAAAAAAAAAAAGAAAACAGTGAAGTGATGTCTTTATATAAAACGGGTCAACATAAACCAAAAAACGCAACAGAACATGGTGAAGAAAATTTAGATGAAGAAATGGTAAGTGAAATAAATAATAATGCACAAGGTGGACTCCTTTTATCAAGCCCATATCAATATAGAGAACAAGGAGGATGTGGAATCATATCTAGTGTTCATGAGACGTCTAATGATACAAAAGATAATGATAAAGAAAATATATCCGAAGACAAAAAGGAGGACCATCAACAAGAAGAAATGTTGAAAACACTTGATAAAAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAGAACAAGAAAAAATCGAAAAAAAAAAAAAAAAGCAAGAAGAAAAGGAAAAGAAAAAACAAGAAAAAGAAAGAAAAAAACAAGAAAAGAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAAAACAAAAAAAAATAGAAAAAGAAAGAAAAAAGAAAGAAGAAAAGGAAAAGAAAAAGAAAAAACATGATAAGGAAAATGAAGAAACAATGCAACAACCAGATCAAACAAGTGAAGAAACCAACAATGAAATTATGGTACCATTACCAAGTCCATTGACAGACGTAACTACACCAGAAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGGAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGAAGAACACAAAAAAGAAGAACACAAATCAAAAGAACACAAATCAAAAGGAAAGAAAGATAAAGGAAAGAAAGATAAAGGAAAACATAAAAAAGCAAAAAAAGAAAAAGTAAAAAAACACGTAGTTAAAAATGTTATAGAAGATGAAGACAAAGATGGTGTAGAAATAATAAACTTAGAAGATAAAGAGGCATGTGAAGAACAACACATAACAGTAGAAAGTAGACCACTAAGCCAACCACAATGTAAACTAATAGATGAACCAGAACAATTAACATTAATGGATAAATCAAAAGTTGAAGAAAAAAACTTATCCATACAAGAGCAATTAATAGGTACCATAGGACGTGTTAATGTAGTACCCAGAAGAGATAATCATAAGAAAAAAATGGCGAAGATAGAGGAAGCTGAACTTCAAAAACAGAAACATGTTGATAAGGAAGAAGACAAAAAAGAAGAATCTAAAGAGGTACAAGAAGAATCTAAAGAGGTACAAGAAGATGAAGAAGAAGTAGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGATGAAGATGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGATGATGAAGAAGATGATGATGAAGAAGATGATGATGAAGATGAAGATGAAGATGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAAGAAGAATCAGAAAAAAAAATAAAAAGAAATTTGAGAAAAAATGCCAAAATCTAA'

# for x in naiveHamming(p,seq,200) :
#     if p==seq[x:]:
#         print ("Your are healthy ")
#     else:
#         print ("Your are sick"  )  

# seq=make_virtual_Fasta(2000)
# seq = seq[:2000] + p + seq[2000:]
# print(naiveHamming(p,seq,200))


#exact pattern matching
# p='ATGAATGTGCTATTTCTTTCGTATAATATTTGTATTCTTTTTTTTGTTGTATGCACATTAAATTTTTCTACTAAGTGCTTTTCCAATGGTTTATTGAAGAATCAAAATATCCTAAACAAAAGTTTTGATTCCATAACGGGAAGATTATTAAACGAAACCGAATTAGAAAAAAATAAAGATGATAATTCAAAATCTGAAACGTTGTTAAAAGAGGAAAAAGATGAAAAGGATGATGTACCTACAACGAGTAATGACAACCTTAAGAATGCTCATAATAATAATGAAATATCAAGTTCAACTGATCCAACGAATATTATTAATGTTAATGATAAAGATAATGAAAACTCTGTAGATAAAAAAAAAGATAAAAAAGAAAAAAAGCATAAAAAAGATAAAAAAGAAAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAACATAAAAAAGAAAAAAAACATAAAAAAGATAAAAAAAAAAAAGAAAACAGTGAAGTGATGTCTTTATATAAAACGGGTCAACATAAACCAAAAAACGCAACAGAACATGGTGAAGAAAATTTAGATGAAGAAATGGTAAGTGAAATAAATAATAATGCACAAGGTGGACTCCTTTTATCAAGCCCATATCAATATAGAGAACAAGGAGGATGTGGAATCATATCTAGTGTTCATGAGACGTCTAATGATACAAAAGATAATGATAAAGAAAATATATCCGAAGACAAAAAGGAGGACCATCAACAAGAAGAAATGTTGAAAACACTTGATAAAAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAGAACAAGAAAAAATCGAAAAAAAAAAAAAAAAGCAAGAAGAAAAGGAAAAGAAAAAACAAGAAAAAGAAAGAAAAAAACAAGAAAAGAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAAAACAAAAAAAAATAGAAAAAGAAAGAAAAAAGAAAGAAGAAAAGGAAAAGAAAAAGAAAAAACATGATAAGGAAAATGAAGAAACAATGCAACAACCAGATCAAACAAGTGAAGAAACCAACAATGAAATTATGGTACCATTACCAAGTCCATTGACAGACGTAACTACACCAGAAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGGAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGAAGAACACAAAAAAGAAGAACACAAATCAAAAGAACACAAATCAAAAGGAAAGAAAGATAAAGGAAAGAAAGATAAAGGAAAACATAAAAAAGCAAAAAAAGAAAAAGTAAAAAAACACGTAGTTAAAAATGTTATAGAAGATGAAGACAAAGATGGTGTAGAAATAATAAACTTAGAAGATAAAGAGGCATGTGAAGAACAACACATAACAGTAGAAAGTAGACCACTAAGCCAACCACAATGTAAACTAATAGATGAACCAGAACAATTAACATTAATGGATAAATCAAAAGTTGAAGAAAAAAACTTATCCATACAAGAGCAATTAATAGGTACCATAGGACGTGTTAATGTAGTACCCAGAAGAGATAATCATAAGAAAAAAATGGCGAAGATAGAGGAAGCTGAACTTCAAAAACAGAAACATGTTGATAAGGAAGAAGACAAAAAAGAAGAATCTAAAGAGGTACAAGAAGAATCTAAAGAGGTACAAGAAGATGAAGAAGAAGTAGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGATGAAGATGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGATGATGAAGAAGATGATGATGAAGAAGATGATGATGAAGATGAAGATGAAGATGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAAGAAGAATCAGAAAAAAAAATAAAAAGAAATTTGAGAAAAAATGCCAAAATCTAA'

# for x in naiveHamming(p,seq,200) :
#     if p==seq[x:]:
#         print ("Your are healthy <3 ")
#     else:
#         print ("Your are sick !!"  )  

def make_virtual_Fasta(n_bases):
    seq=''
    for _ in range(n_bases):
        seq+=random.choice('ACGT')
    return seq

# p='ATGAATGTGCTATTTCTTTCGTATAATATTTGTATTCTTTTTTTTGTTGTATGCACATTAAATTTTTCTACTAAGTGCTTTTCCAATGGTTTATTGAAGAATCAAAATATCCTAAACAAAAGTTTTGATTCCATAACGGGAAGATTATTAAACGAAACCGAATTAGAAAAAAATAAAGATGATAATTCAAAATCTGAAACGTTGTTAAAAGAGGAAAAAGATGAAAAGGATGATGTACCTACAACGAGTAATGACAACCTTAAGAATGCTCATAATAATAATGAAATATCAAGTTCAACTGATCCAACGAATATTATTAATGTTAATGATAAAGATAATGAAAACTCTGTAGATAAAAAAAAAGATAAAAAAGAAAAAAAGCATAAAAAAGATAAAAAAGAAAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAACATAAAAAAGAAAAAAAACATAAAAAAGATAAAAAAAAAAAAGAAAACAGTGAAGTGATGTCTTTATATAAAACGGGTCAACATAAACCAAAAAACGCAACAGAACATGGTGAAGAAAATTTAGATGAAGAAATGGTAAGTGAAATAAATAATAATGCACAAGGTGGACTCCTTTTATCAAGCCCATATCAATATAGAGAACAAGGAGGATGTGGAATCATATCTAGTGTTCATGAGACGTCTAATGATACAAAAGATAATGATAAAGAAAATATATCCGAAGACAAAAAGGAGGACCATCAACAAGAAGAAATGTTGAAAACACTTGATAAAAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAGAACAAGAAAAAATCGAAAAAAAAAAAAAAAAGCAAGAAGAAAAGGAAAAGAAAAAACAAGAAAAAGAAAGAAAAAAACAAGAAAAGAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAAAACAAAAAAAAATAGAAAAAGAAAGAAAAAAGAAAGAAGAAAAGGAAAAGAAAAAGAAAAAACATGATAAGGAAAATGAAGAAACAATGCAACAACCAGATCAAACAAGTGAAGAAACCAACAATGAAATTATGGTACCATTACCAAGTCCATTGACAGACGTAACTACACCAGAAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGGAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGAAGAACACAAAAAAGAAGAACACAAATCAAAAGAACACAAATCAAAAGGAAAGAAAGATAAAGGAAAGAAAGATAAAGGAAAACATAAAAAAGCAAAAAAAGAAAAAGTAAAAAAACACGTAGTTAAAAATGTTATAGAAGATGAAGACAAAGATGGTGTAGAAATAATAAACTTAGAAGATAAAGAGGCATGTGAAGAACAACACATAACAGTAGAAAGTAGACCACTAAGCCAACCACAATGTAAACTAATAGATGAACCAGAACAATTAACATTAATGGATAAATCAAAAGTTGAAGAAAAAAACTTATCCATACAAGAGCAATTAATAGGTACCATAGGACGTGTTAATGTAGTACCCAGAAGAGATAATCATAAGAAAAAAATGGCGAAGATAGAGGAAGCTGAACTTCAAAAACAGAAACATGTTGATAAGGAAGAAGACAAAAAAGAAGAATCTAAAGAGGTACAAGAAGAATCTAAAGAGGTACAAGAAGATGAAGAAGAAGTAGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGATGAAGATGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGATGATGAAGAAGATGATGATGAAGAAGATGATGATGAAGATGAAGATGAAGATGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAAGAAGAATCAGAAAAAAAAATAAAAAGAAATTTGAGAAAAAATGCCAAAATCTAA'
# seq=make_virtual_Fasta(3000)
# mismatch=make_virtual_Fasta(50)
# newp=p[:1400]+mismatch+p[1450:]
# seq = seq[:1400] + newp + seq[1400:]
# seq=make_virtual_Fasta(2000)
# seq = seq[:2000] + p + seq[2000:]
# sys.stdout=open('test/notfected.fasta','w')
# jsonobj=json.dumps(seq)
# print("{}".format(jsonobj))
 
             
                
        

# k-mers and hash table by dictinaries 
# def hashtable(seq,k) :
#         k=k
#         index={}
        
#         for start_k_pos in range(len(seq)-k+1):
             
#              if seq[start_k_pos:start_k_pos+k] not in index:
#                      index [seq[start_k_pos:start_k_pos+k]]=[start_k_pos]
#              else:    
#                       index [seq[start_k_pos:start_k_pos+k]]+=[start_k_pos]
#         list = [(k, v) for k, v in index.items()]              
                
#         list.sort()       
#         return list
    
# print('---'*50)       
# indexed_genome=hashtable(seq,17)

# print(indexed_genome) 
 



              
       


# Making request and response  by Flask
 
app=Flask(__name__)

class UploadFileForm(FlaskForm):
    file=FileField("File")
    submit=SubmitField("Upload Field")
        


app.config['SECRET_KEY']='supersecret'
app.config['UPLOAD_FOLDER']='static/download'
@app.route('/',methods=["POST","GET"])
def home ():
  
    return render_template('index1.html')
@app.route('/about',methods=["POST","GET"])
def about ():
  
    return render_template('index.html')


@app.route('/upload',methods=["POST","GET"])
def upload ():
    form=UploadFileForm()
    if form.validate_on_submit():
        file=form.file.data
        file.save(os.path.join(os.path.abspath(os.path.dirname(__file__)),app.config['UPLOAD_FOLDER'],secure_filename(file.filename)))
        seq=readFastA("static\download\\{}".format(file.filename))
        p='ATGAATGTGCTATTTCTTTCGTATAATATTTGTATTCTTTTTTTTGTTGTATGCACATTAAATTTTTCTACTAAGTGCTTTTCCAATGGTTTATTGAAGAATCAAAATATCCTAAACAAAAGTTTTGATTCCATAACGGGAAGATTATTAAACGAAACCGAATTAGAAAAAAATAAAGATGATAATTCAAAATCTGAAACGTTGTTAAAAGAGGAAAAAGATGAAAAGGATGATGTACCTACAACGAGTAATGACAACCTTAAGAATGCTCATAATAATAATGAAATATCAAGTTCAACTGATCCAACGAATATTATTAATGTTAATGATAAAGATAATGAAAACTCTGTAGATAAAAAAAAAGATAAAAAAGAAAAAAAGCATAAAAAAGATAAAAAAGAAAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAAGATAAAAAAGAAAAAAAACATAAAAAAGAAAAAAAACATAAAAAAGATAAAAAAAAAAAAGAAAACAGTGAAGTGATGTCTTTATATAAAACGGGTCAACATAAACCAAAAAACGCAACAGAACATGGTGAAGAAAATTTAGATGAAGAAATGGTAAGTGAAATAAATAATAATGCACAAGGTGGACTCCTTTTATCAAGCCCATATCAATATAGAGAACAAGGAGGATGTGGAATCATATCTAGTGTTCATGAGACGTCTAATGATACAAAAGATAATGATAAAGAAAATATATCCGAAGACAAAAAGGAGGACCATCAACAAGAAGAAATGTTGAAAACACTTGATAAAAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAGAACAAGAAAAAATCGAAAAAAAAAAAAAAAAGCAAGAAGAAAAGGAAAAGAAAAAACAAGAAAAAGAAAGAAAAAAACAAGAAAAGAAAGAACGTAAACAAAAAGAAAAAGAAATGAAAAAACAAAAAAAAATAGAAAAAGAAAGAAAAAAGAAAGAAGAAAAGGAAAAGAAAAAGAAAAAACATGATAAGGAAAATGAAGAAACAATGCAACAACCAGATCAAACAAGTGAAGAAACCAACAATGAAATTATGGTACCATTACCAAGTCCATTGACAGACGTAACTACACCAGAAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGGAGAACACAAAGAAGGAGAACACAAAGAAGAAGAACACAAAGAAGAAGAACACAAAAAAGAAGAACACAAATCAAAAGAACACAAATCAAAAGGAAAGAAAGATAAAGGAAAGAAAGATAAAGGAAAACATAAAAAAGCAAAAAAAGAAAAAGTAAAAAAACACGTAGTTAAAAATGTTATAGAAGATGAAGACAAAGATGGTGTAGAAATAATAAACTTAGAAGATAAAGAGGCATGTGAAGAACAACACATAACAGTAGAAAGTAGACCACTAAGCCAACCACAATGTAAACTAATAGATGAACCAGAACAATTAACATTAATGGATAAATCAAAAGTTGAAGAAAAAAACTTATCCATACAAGAGCAATTAATAGGTACCATAGGACGTGTTAATGTAGTACCCAGAAGAGATAATCATAAGAAAAAAATGGCGAAGATAGAGGAAGCTGAACTTCAAAAACAGAAACATGTTGATAAGGAAGAAGACAAAAAAGAAGAATCTAAAGAGGTACAAGAAGAATCTAAAGAGGTACAAGAAGATGAAGAAGAAGTAGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGATGAAGATGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGAAGATGATGCTGAAGAAGATGATGATGAAGAAGATGATGATGAAGAAGATGATGATGAAGATGAAGATGAAGATGAAGAAGATGAAGAAGAAGAAGAAGAAGAAGAAGAAGAATCAGAAAAAAAAATAAAAAGAAATTTGAGAAAAAATGCCAAAATCTAA'
        
        print(seq)
        naiveHamming(p,seq,200)
        for x in naiveHamming(p,seq,200) :
            if p==seq[x:]:
                result="Your are healthy <3 "
                return result
            else:
                result="Your are sick !! " 
                return result   
                                            
        
    return render_template('index2.html',form=form)


if __name__=="__main__":
    app.run(debug=True)

# insert our dataset to the database

# for k_mer,position in indexed_genome:% (k_mer, position)
# query="INSERT INTO Human_Genome_Chr9 (k_mer  , position  ) \
#                    VALUES ('%s', '%s')" 
# mycursor.executemany(query,hashtable(seq,127))       
# db.commit()





# read malaria or reciptor 

# def readFastq(filename):
#     seqs=[]
#     with open(filename)as f:
#         while True:
#           f.readline()
#           seq=f.readline().rstrip()
#           f.readline()
#           f.readline()
#           if len(seq)==0:
#             break

#         seqs.apppend(seq)

#         return seqs
    
#     seqs =  readFastq(r"")



#  for (key,value)in range(index):
#                  if key==seq[start_k_pos:start_k_pos+k]:
#                      index.value.append(value)